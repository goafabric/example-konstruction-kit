#!/bin/bash
COMMAND=$1
PROFILE=$2

function read_secret() {
    read -p "server name <kubernetes>: " _Values_host_name < /dev/tty
    _Values_host_name="${_Values_host_name:=kubernetes}"

    if ping -c 1 "${_Values_host_name}" &> /dev/null
    then
      echo host ${_Values_host_name} reachable
    else
      echo host ${_Values_host_name} is not reachable, do have have entry inside /etc/hosts ?
    fi

    _Values_host_name="${_Values_host_name:=kubernetes}"

    kubectl delete --ignore-not-found configmap cluster-config -n default
    kubectl create configmap cluster-config -n default --from-literal=hostname=${_Values_host_name}
    _Values_host_name=`kubectl get configmaps cluster-config -o jsonpath='{.data.hostname}' -n default` && [ -z "$_Values_host_name" ] && echo "Server Name is empty" && exit
    echo Server Name is: ${_Values_host_name}
}

function dynKubectl() {
eval "cat <<EOF
$(<$1)
EOF
" | kubectl apply -f -
}


function up() {
    read_secret
    helm repo add jetstack https://charts.jetstack.io > /dev/null
    helm upgrade --install cert-manager jetstack/cert-manager --version v1.13.1 \
         --namespace cert-manager --create-namespace --set installCRDs=true,prometheus.enabled=false,extraArgs[0]='--enable-certificate-owner-ref'
    dynKubectl ./templates/deployment${1}.yaml
}

function down() {
    kubectl delete --ignore-not-found -f ./templates/deployment.yaml > /dev/null
    kubectl delete --ignore-not-found -f ./templates/deployment-letsencrypt.yaml > /dev/null
    helm uninstall cert-manager --namespace cert-manager && kubectl delete namespace cert-manager
}

if   [ "${COMMAND}" = "init" ] ; then up;
elif [ "${COMMAND}" = "lets" ] ; then up -letsencrypt;
elif [ "${COMMAND}" = "restart" ] ; then down && up;
elif [ "${COMMAND}" = "describe" ] ; then kubectl describe certificaterequest cluster-ca -n cert-manager;
elif [ "${COMMAND}" = "prune" ]; then down;

else echo Doing nothing !; fi