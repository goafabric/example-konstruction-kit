apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${_Values_app_name}
spec:
  selector:
    matchLabels:
      app: ${_Values_app_name}
      version: v1
  replicas: 1
  strategy:
    type: Recreate #RollingUpdate
  template:
    metadata:
      annotations:
        linkerd.io/inject: enabled
        sidecar.istio.io/inject: "false"
      labels:
        app: ${_Values_app_name}
        version: v1
    spec:
      containers:
        - name: ${_Values_app_name}
          image: "postgres:16.0"
          imagePullPolicy: IfNotPresent #Always
          ports:
            - name: transport
              containerPort: ${_Values_service_port}
              protocol: TCP
          envFrom:
            - configMapRef:
                name: ${_Values_app_name}-config
            - secretRef:
                name: ${_Values_app_name}-config-external

          args: ["postgres",
                 "-c", "shared_preload_libraries=pg_stat_statements",
                 "-c", "shared_buffers=${_Values_resources_requests_memory}B",
                 "-c", "max_connections=${_Values_postgres_max_connections}"]
          resources:
            requests:
              memory: "${_Values_resources_requests_memory}"
              cpu: "${_Values_resources_requests_cpu}"
            limits:
              cpu: "${_Values_resources_limits_cpu}"

          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: ${_Values_app_name}-pvc-volume

            - mountPath: /docker-entrypoint-initdb.d/
              name: ${_Values_app_name}-initdb-volume

      volumes:
        - name: ${_Values_app_name}-pvc-volume
          persistentVolumeClaim:
            claimName: ${_Values_app_name}-pvc

        - name: ${_Values_app_name}-initdb-volume
          configMap:
            name: ${_Values_app_name}-data-files


