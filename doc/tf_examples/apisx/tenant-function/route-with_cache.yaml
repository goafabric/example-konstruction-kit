route-with-cache: apisix.apache.org/v2
kind: ApisixRoute
metadata:
  name: {{ include "application.fullname" . }}
spec:
  http:
    - name: {{ include "application.fullname" . }}
      match:
        hosts:
          - {{ .Values.ingress.hosts }}
        paths:
          - {{ .Values.ingress.paths }}
          - {{ .Values.ingress.paths }}/*
      backends:
        - serviceName: {{ include "application.fullname" . }}
          servicePort: http
      plugins:
        - name: redirect
          enable: true
          config:
            http_to_https: true
        - name: proxy-rewrite
          enable: true
          config:
            host: "{{ include "application.fullname" . }}.{{ .Release.Namespace }}"
            regex_uri:
              - {{ .Values.ingress.paths }}/(.*)
              - /$1
#            headers:
#              X-TenantId: 0
        - name: openid-connect
          enable: {{ .Values.oidc.enabled }}
          config:
            client_id: oauth2-proxy
            client_secret: none
            discovery: https://{{ .Values.ingress.hosts }}/oidc/realms/tenant-0/.well-known/openid-configuration
            access_token_in_authorization_header: false
            set_id_token_header: false
            set_userinfo_header: true
            ssl_verify: false
            redirect_uri: "{{ .Values.ingress.paths }}/redirect_uri"
            logout_path: "{{ .Values.ingress.paths }}/logout"
            session:
              secret: "{{ .Values.oidc.session.secret | default "" }}"

        - name: serverless-post-function
          enable: true
          config:
            phase: "rewrite"
            functions:
              - |
                return function()              
                  local url = "http://callee-service-application.example:8080/authorizations/getTenantBySubject"
                  local http = require("resty.http")  
                  local cjson = require("cjson.safe")
                  
                  local cache = ngx.shared.jwks
                  local key = ngx.req.get_headers()["x-access-token"]  --should be hashed !
                  local tenantId
                
                  local cachedTenant, flags = cache:get(key)
                  if cachedTenant then
                    ngx.log(ngx.ERR, "cache hit")
                    tenantId = cachedTenant
                  else
                    ngx.log(ngx.ERR, "cache miss")
                    local httpc = http.new()
                    httpc:set_timeout(100)
                    local res, err = httpc:request_uri(url, {
                      method = "GET", headers = ngx.req.get_headers(),
                    })
              
                    if not res or res.status ~= 200 then
                      ngx.log(ngx.ERR, "Tenant Resolution failed: ", err or ("HTTP status " .. (res and res.status or "unknown")))
                      ngx.say("Tenant Resolution failed")
                      ngx.exit(ngx.HTTP_BAD_REQUEST)
                    end
                                                  
                    tenantId = res.body
                    cache:set(key, tenantId, 60) 
                  end

                  ngx.req.set_header("X-TenantId", tenantId)
                  ngx.log(ngx.ERR, "X-TenantId set to: ", tenantId)
                  ngx.log(ngx.ERR, "userinfo is ", ngx.req.get_headers()["x-userinfo"])
                
                  -- exemplary section if we would want to use the token endpoint, that should return token + tenantId
                  -- local data, decode_err = cjson.decode(res.body)
                  -- ngx.req.set_header("Authentication", "Bearer " .. data.token)
                end