grafana.ini:
  server:
    root_url: "%(protocol)s://%(domain)s/grafana"
    serve_from_sub_path: false
  auth:
    disable_login_form: true
    disable_signout_menu: true
  auth.anonymous:
    enabled: true
    org_role: Admin
  security:
    allow_embedding: "true"

datasources:
  datasources.yaml:
    apiVersion: 1
    datasources:
    - name: loki
      type: loki
      uid: loki
      access: proxy
      orgId: 1
      url: http://loki:3100
      editable: true
      isDefault: false
      jsonData:
        derivedFields:
          - datasourceUid: tempo
            matcherRegex: '.+ --- \[.+\] \[.+\] \[(\w*)-\w*\] .+'
            name: traceId
            url: $${__value.raw}
          - datasourceUid: tempo
            matcherRegex: 'tenantId=(\w+)'
            name: tenantId
    - name: tempo
      type: tempo
      uid: tempo
      access: proxy
      orgId: 1
      url: http://tempo-query-frontend:3100
      editable: true
      isDefault: false
      jsonData:
        httpMethod: GET
        tracesToMetrics:
          datasourceUid: prometheus
          tags: [ { key: 'service.name', value: 'app' }, { key: 'org' }, { key: 'method' }, { key: 'uri' }, { key: 'outcome' }, { key: 'status' }, { key: 'exception' } ]
          queries:
            - name: 'Throughput'
              query: 'sum(rate(http_server_requests_seconds_count{$$__tags}[$$__rate_interval]))'
            - name: 'Latency'
              query: 'histogram_quantile(1.00, sum(rate(http_server_requests_seconds_bucket{$$__tags}[$$__rate_interval])) by (le))'
        tracesToLogs:
          datasourceUid: 'loki'
          tags: [ 'instance', 'pod', 'namespace', 'hostname' ]
          mappedTags: [ { key: 'org' }, { key: 'service.name', value: 'app' } ]
          mapTagNamesEnabled: true
          spanStartTimeShift: '-1h'
          spanEndTimeShift: '1h'
          filterByTraceID: true
          filterBySpanID: false
          lokiSearch: true
        lokiSearch:
          datasourceUid: loki
        serviceMap:
          datasourceUid: prometheus
        search:
          hide: false
        nodeGraph:
          enabled: true
      
ingress:
  enabled: true
  ingressClassName: nginx
  annotations:
    cert-manager.io/cluster-issuer: my-cluster-issuer

    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /$1

  path: /grafana/?(.*)
  tls:
    - secretName: "root-certificate"