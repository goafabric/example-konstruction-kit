#!/bin/bash
source .values
COMMAND=$1
WORKSPACE=$TF_VAR_hostname

function apply() {
  (cd $1; terraform workspace select -or-create $WORKSPACE && terraform init && terraform apply -auto-approve)
}

function destroy() {
  (cd $1; terraform workspace select -or-create $WORKSPACE && terraform destroy -auto-approve)
}

function patch() {
  cp kind-config ~/.kube.profile/.kube.kind/config
  kubectl create configmap cluster-config -n default --from-literal=hostname=$TF_VAR_hostname

  kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/download/v0.7.2/components.yaml && kubectl patch deployment metrics-server -n kube-system --type='json' -p='[{"op": "add", "path": "/spec/template/spec/containers/0/args/-", "value": "--kubelet-insecure-tls"}]'
  #kubectl -n kube-system scale deployment coredns --replicas 1 #workaround for network policy problem in kind
}

function up() {
    time(
    apply ./
    patch
    apply ../../infra/namespaces/
    apply ../../infra/network-policies/
    apply ../../infra/ingress/cert-manager
    apply ../../infra/ingress/$INGRESS_TYPE
    apply ../../infra/dashboard
    )
}

function down() {
    time(
    destroy ../../infra/dashboard
    destroy ../../infra/ingress/$INGRESS_TYPE
    destroy ../../infra/ingress/cert-manager
    destroy ../../infra/network-policies/
    destroy ../../infra/namespaces/
    destroy ./
    )
}

if   [ "${COMMAND}" = "init" ]; then up;
elif [ "${COMMAND}" = "prune" ]; then down;

else echo Doing nothing !; fi