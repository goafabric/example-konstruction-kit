#!/bin/bash
COMMAND=$1
IMAGE_ARCH=$2

SERVER_ARCH=`kubectl version --output=json | grep "linux/arm64" > /dev/null && echo "-arm64v8"`
[[ "${IMAGE_ARCH}" = "-native" ]] && IMAGE_ARCH+=${SERVER_ARCH}
[[ `kubectl get configmaps authentication-config --ignore-not-found -o jsonpath='{.data.authentication}' -n default` = "oidc" ]] && INGRESS_AUTHENTICATION="--set ingress.authentication=oidc"

function up() {
    kubectl apply -f ./templates
}

function down() {
    kubectl delete -f ./templates
}

function proxy() {
  argocd admin initial-password -n argocd
  kubectl port-forward svc/argocd-server -n argocd 8080:443
}

function login() {
  argocd admin initial-password -n argocd && argocd login kubernetes --port-forward-namespace argocd
  kubectl config set-context --current --namespace=argocd
}

function logout() {
  argocd logout kubernetes --port-forward-namespace argocd
  kubectl config set-context --current --namespace=default
}


if   [ "${COMMAND}" = "up" ]; then up;
elif [ "${COMMAND}" = "down" ]; then down;
elif [ "${COMMAND}" = "restart" ]; then down && up;
elif [ "${COMMAND}" = "lint" ]; then helm lint ./;
elif [ "${COMMAND}" = "proxy" ]; then proxy;
elif [ "${COMMAND}" = "login" ]; then login;
elif [ "${COMMAND}" = "logout" ]; then logout;

else echo Doing nothing !; fi